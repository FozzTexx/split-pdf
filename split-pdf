#!/usr/bin/env python3
# -*- python -*-

# Copyright 2019 by Chris Osborn <fozztexx@fozztexx.com>
#
# This file is part of split-pdf
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

import argparse
import os, sys
import subprocess
import glob
import magic

IMG_TYPE = ".png"

def build_argparser():
  parser = argparse.ArgumentParser()
  parser.add_argument("pdf", help="pdf to split")
  parser.add_argument("--left", default=50, type=int, help="left percentage")
  parser.add_argument("--right", type=int, help="right percentage")
  parser.add_argument("--overlap", type=int, help="top/bottom overlap")
  parser.add_argument("--rotate", default=0, type=float, help="rotate degrees")
  parser.add_argument("--firstislast", action="store_true",
                      help="left half of first page should be last")
  parser.add_argument("--dontshrink", action="store_true",
                      help="Don't use noteshrink to reduce colors")
  parser.add_argument("--onebit", action="store_true", help="Process pages as 1bit")
  parser.add_argument("--unstapled", action="store_true",
                      help="Document was unstapled to scan, pages alternate between sides")
  parser.add_argument("--reverse", action="store_true",
                      help="Document was scanned back to front")
  parser.add_argument("--white", action="store_true",
                      help="Make background white")
  parser.add_argument("--directory", help="directory with extracted pages")
  return parser

def main():
  args = build_argparser().parse_args()

  cwd = os.getcwd()
  
  pdf = os.path.abspath(args.pdf)
  if not os.path.exists(pdf):
    print("No such file", pdf)
    exit(1)

  if not args.directory:
    if os.path.isdir(pdf):
      tmp = pdf
    else:
      tmp = os.path.dirname(pdf)
    tmp = os.path.basename(__file__)
    tmp += "." + str(os.getpid())
    os.mkdir(tmp)
    os.chdir(tmp)
  else:
    os.chdir(args.directory)

  if os.path.isdir(args.pdf):
    ipath = os.path.join(pdf, "*")
    files = glob.glob(ipath)
    pages = []
    m = magic.Magic(mime=True)
    for f in files:
      if not os.path.isdir(f):
        ftype = m.from_file(f)
        if ftype.startswith("image/"):
          pages.append(f)
  else:
    cmd = ["pdfimages", "-list", pdf]
    images = subprocess.run(cmd, stdout=subprocess.PIPE)
    images = [x.split() for x in images.stdout.decode("utf-8").splitlines()]
    images = images[2:]

    cmd = ["pdfimages", "-png", pdf, "page"]
    err = subprocess.call(cmd)
    if err != 0:
      print("Failed: ", cmd, file=sys.stderr)
      exit(1)

    for img in images:
      if img[2] != "image":
        path = "page-%03i.png" % (int(img[1]))
        os.remove(path)
  
    pages = glob.glob("page-[0-9][0-9][0-9].*")

  pages = sorted(pages)

  left = "%i%%x100%%" % (args.left)
  if not args.right:
    right = "%i%%x100%%" % (100 - args.left)
  else:
    right = "%i%%x100%%" % (args.right)

  if args.overlap is not None:
    cpages = []
    for idx in range(len(pages)):
      p1 = pages[idx]
      p2 = pages[idx + 1]
      print(p1, end='\r')
      v = subprocess.run(["identify", "-format", "%w %h", p1], stdout=subprocess.PIPE)
      w1, h1 = [int(x) for x in v.split()]
      v = subprocess.run(["identify", "-format", "%w %h", p2], stdout=subprocess.PIPE)
      w2, h2 = [int(x) for x in v.split()]

      height = h1 + h2 - args.overlap
      base, ext = os.path.splitext(p1)
      out = base + "a" + IMG_TYPE

      cmd = ["convert", "-size",  str(w1) + "x" + str(height), "xc:None",
             "-background", "white", p1,
             "-gravity", "northwest", "-composite", p2,
             "-gravity", "southwest", "-composite", out]
      err = subprocess.call(cmd)
      if err != 0:
        print("Failed: ", cmd, file=sys.stderr)
        exit(1)
      os.remove(p1)
      os.remove(p2)
      cpages.append(out)
    pages = cpages

  for idx, img in enumerate(pages):
    print(img, end='\r')
    base, ext = os.path.splitext(os.path.basename(img))
    out1 = ("page-%03ia" + IMG_TYPE) % (idx + 1)
    out2 = ("page-%03ib" + IMG_TYPE) % (idx + 1)
    cmd = ["convert", "-rotate", str(args.rotate), img, "-gravity", "west",
           "-crop", left, "+repage", out1]
    err = subprocess.call(cmd)
    if err != 0:
      print("Failed: ", cmd, file=sys.stderr)
      exit(1)
    cmd = ["convert", "-rotate", str(args.rotate), img, "-gravity", "east",
           "-crop", right, "+repage", out2]
    err = subprocess.call(cmd)
    if err != 0:
      print("Failed: ", cmd, file=sys.stderr)
      exit(1)

    # width = int($(identify -format %w @(img))) / 2
    # w1 = int($(identify -format %w @(out1)))
    # w2 = int($(identify -format %w @(out2)))
    # out1a = base + "aa" + IMG_TYPE
    # out2b = base + "bb" + IMG_TYPE
    # convert @(out1) -gravity east -background white -splice @(width - w1)x0 @(out1a)
    # mv @(out1a) @(out1)
    # convert @(out2) -gravity west -background white -splice @(width - w2)x0 @(out2b)
    # mv @(out2b) @(out2)

  pages = sorted(glob.glob("page-[0-9][0-9][0-9]?.*"))
  if args.firstislast:
    last = "page-%03i" % (int(pages[-1][5:8]) + 1) + pages[0][8:]
    os.rename(pages[0], last)
    pages.pop(0)
    pages.append(last)

  if args.unstapled:
    np = len(pages)
    hnp = int(np / 2)
    repages = []
    for i in range(np):
      h = i % hnp
      pagenum = h * 2 + 1 - h % 2      
      pagenum = abs((np - i % 2 * 2) * int(i / hnp) - pagenum)
      if args.reverse:
        pagenum = np - i % 2 * 2 - pagenum
      repages.append(pages[pagenum])
    pages = repages
    
  if not args.dontshrink:
    flags = []
    if args.white:
      flags.append("-w")
    # noteshrink.py -R -K @(pages)
    cmd = ["noteshrink.py", "-K"]
    cmd.extend(flags)
    cmd.extend(pages)
    err = subprocess.call(cmd)
    if err != 0:
      print("Failed: ", cmd, file=sys.stderr)
      exit(1)
  elif args.onebit:
    cmd = ["jbig2", "-s", "-p", "-v"]
    cmd.append(pages)
    err = subprocess.call(cmd)
    if err != 0:
      print("Failed: ", cmd, file=sys.stderr)
      exit(1)
    os.system("jbig2-pdf output > output.pdf")
  else:
    for idx, page in enumerate(pages):
      new_page = "page%04i.png" % (idx)
      os.symlink(page, new_page)
    print()
    sys.exit(0)
    #convert @(pages) output.pdf

  if os.path.isdir(pdf):
    dpath = pdf
  else:
    dpath = os.path.dirname(pdf)
  base, ext = os.path.splitext(os.path.basename(pdf))
  dest = os.path.join(dpath, base + "-split.pdf")
  os.rename("output.pdf", dest)
  print("Saved output.pdf to", dest)

  os.chdir("..")
  #os.system("rm -rf " + tmp)
  
  return

if __name__ == '__main__':
  sys.exit(main() or 0)
